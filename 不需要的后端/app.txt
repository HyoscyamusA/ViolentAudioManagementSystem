"""
from flask import Flask, request, jsonify
import os
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# 配置上传文件夹
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'message': '未检测到文件'}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({'message': '未选择任何文件'}), 400

    if not file.filename.endswith('.wav'):
        return jsonify({'message': '仅支持WAV格式文件'}), 400

    try:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)

        # 模拟调用模型预测
        # 你可以替换成实际的预测代码
        prediction_probability = 0.85  # 假设预测结果为85%
        return jsonify({'message': '上传成功', 'probability': prediction_probability}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True)
"""
""""1
from flask import Flask, request, jsonify
import os
from flask_cors import CORS
from inference_demo import IsViolent  # 引用预测模块

app = Flask(__name__)
CORS(app)

# 配置上传文件夹
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'message': '未检测到文件'}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({'message': '未选择任何文件'}), 400

    if not file.filename.endswith('.wav'):
        return jsonify({'message': '仅支持WAV格式文件'}), 400

    try:
        # 保存上传的音频文件
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)

        # 使用 IsViolent 函数处理文件并预测
        prediction_probability = IsViolent(filepath)

        # 返回预测结果
        return jsonify({'message': '上传成功', 'probability': prediction_probability}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True)
"""
"""2
from flask import Flask, request, jsonify
import os
import sqlite3
from datetime import datetime
from flask_cors import CORS
from inference_demo import IsViolent  # 引用预测模块

app = Flask(__name__)
CORS(app)

# 配置上传文件夹
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 初始化数据库
DB_FILE = 'data.db'


def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                probability REAL NOT NULL
            )
        ''')
        conn.commit()


@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'message': '未检测到文件'}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({'message': '未选择任何文件'}), 400

    if not file.filename.endswith('.wav'):
        return jsonify({'message': '仅支持WAV格式文件'}), 400

    try:
        # 保存上传的音频文件
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)

        # 使用 IsViolent 函数处理文件并预测
        prediction_probability = IsViolent(filepath)

        # 将结果存储到数据库
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO results (timestamp, probability)
                VALUES (?, ?)
            ''', (datetime.now().isoformat(), prediction_probability))
            conn.commit()

        # 返回预测结果
        return jsonify({'message': '上传成功', 'probability': prediction_probability}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500


@app.route('/results', methods=['GET'])
def get_results():
    try:
        # 查询数据库中的所有结果
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT timestamp, probability FROM results
            ''')
            rows = cursor.fetchall()

        # 格式化数据
        results = [{'timestamp': row[0], 'probability': row[1]} for row in rows]
        return jsonify({'data': results}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500


if __name__ == '__main__':
    init_db()  # 初始化数据库
    app.run(debug=True)
"""
from flask import Flask, request, jsonify
import os
import sqlite3
from datetime import datetime
from flask_cors import CORS
from inference_demo import IsViolent  # 引用预测模块

app = Flask(__name__)
CORS(app)

# 配置上传文件夹
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 初始化数据库
DB_FILE = 'data.db'


def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                probability REAL NOT NULL
            )
        ''')
        conn.commit()


@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'message': '未检测到文件'}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({'message': '未选择任何文件'}), 400

    if not file.filename.endswith('.wav'):
        return jsonify({'message': '仅支持WAV格式文件'}), 400

    try:
        # 保存上传的音频文件
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)

        # 使用 IsViolent 函数处理文件并预测
        prediction_probability = IsViolent(filepath)

        # 将结果存储到数据库
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO results (timestamp, probability)
                VALUES (?, ?)
            ''', (datetime.now().isoformat(), prediction_probability))
            conn.commit()

        # 返回预测结果
        return jsonify({'message': '上传成功', 'probability': prediction_probability}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500


@app.route('/results', methods=['GET'])
def get_results():
    try:
        # 查询数据库中的所有结果
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT timestamp, probability FROM results
            ''')
            rows = cursor.fetchall()

        # 格式化数据
        results = [{'timestamp': row[0], 'probability': row[1]} for row in rows]
        return jsonify({'data': results}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500


@app.route('/monthly_counts', methods=['GET'])
def get_monthly_counts():
    try:
        # 查询数据库，按月统计上传次数
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT strftime('%Y-%m', timestamp) AS month, COUNT(*) 
                FROM results
                GROUP BY month
                ORDER BY month
            ''')
            rows = cursor.fetchall()

        # 格式化数据
        monthly_counts = [{'month': row[0], 'count': row[1]} for row in rows]
        return jsonify({'data': monthly_counts}), 200
    except Exception as e:
        return jsonify({'message': f'服务器内部错误：{str(e)}'}), 500


if __name__ == '__main__':
    init_db()  # 初始化数据库
    app.run(debug=True)

